1. Spring IOC Container 
      The IOC (Inversion of Control) container in Spring is a core concept responsible 
for managing the lifecycle and dependencies of objects, known as beans.
It helps implement Dependency Injection (DI), which means that the control of creating 
and managing objects is transferred from the application code to the Spring framework.

   the IOC container helps achieve loose coupling between objects by handling their creation, 
lifecycle, and dependencies, making the code cleaner and easier to test.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

2.  What is Spring Boot Auto-Configuration, and how does it work?

Explanation:

In Spring Boot, auto-configuration is one of its powerful features. When you add a specific dependency in Spring Boot, it automatically configures the components required for that dependency. For example, if you add the spring-boot-starter-web dependency, Spring Boot will automatically configure everything needed for a web application (like DispatcherServlet, ViewResolver, etc.).

How does it work?

@EnableAutoConfiguration Annotation: In Spring Boot applications, we use the @SpringBootApplication annotation. This annotation includes @EnableAutoConfiguration, which triggers the auto-configuration process.

Auto-Configuration Classes: There are specific classes in Spring Boot dedicated to auto-configuration (like WebMvcAutoConfiguration, JpaAutoConfiguration). These are listed in the spring.factories file in Spring Boot.

Conditionally Load: The auto-configuration classes are conditionally loaded based on the dependencies you’ve added. For instance, if you add the spring-boot-starter-data-jpa dependency, the JpaAutoConfiguration class will be loaded, but only if the required dependencies for Spring Data JPA are present.

Custom Configuration: You can also customize the configuration. If you don’t want to use a specific auto-configuration, you can exclude it using @EnableAutoConfiguration(exclude = ClassName.class).

Spring Boot’s auto-configuration simplifies the setup process, allowing you to focus on essential configuration by writing minimal code, while Spring Boot handles the rest.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

3. What is Break and Continue?

break and continue statements are used to skip some statements inside the loop or terminate the loop immediately without checking the test expression.

These statements can be used inside any loops such as for, while, do-while loop.
The break statement is used to terminate the loop immediately. 

The continue statement is used to skip the current iteration of the loop.
Break keyword with a semicolon is used to indicate break statements in java programming. continue keyword is used to indicate continue statement in java programming.it was also called loop control jump control statement 

------------------------------------------------------------------------------------------------------------------------------------------------

4.What is Spring Boot, and how is it different from Spring Framework?

Spring Boot is an extension of the Spring Framework designed to simplify and accelerate the development of Spring applications. It provides auto-configuration, a set of pre-defined starter dependencies, and an embedded server, which streamline the setup and deployment process. Unlike the traditional Spring Framework, which requires extensive manual configuration and external server deployment, Spring Boot allows for rapid application development with minimal configuration and built-in features like monitoring and management endpoints. This makes Spring Boot particularly advantageous for quickly creating production-ready applications.

-------------------------------------------------------------------------------------------------------------------------------------------------

5.What is @Autowierd Annotations?


The @Autowired annotation is used in the Spring Framework to automatically inject dependencies into Spring-managed beans. It simplifies dependency injection by allowing Spring to resolve and inject collaborating beans into your bean.

Key Points:

Automatic Dependency Injection:
@Autowired is used to inject dependencies automatically without the need for explicit configuration. Spring will automatically find and inject the required bean.

Optional Dependencies:
If a dependency is not mandatory, you can use @Autowired(required = false), and Spring will not throw an exception if the bean is not found.

Qualifier:
If there are multiple beans of the same type, you can use @Qualifier to specify which bean to inject.

Spring Boot:
In a Spring Boot application, @Autowired is commonly used to inject services, repositories, or other components into your classes, promoting loose coupling and easier management of dependencies.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
6.) What is the difference between CrudRepo and JpaRepo?
Crud repository: It is a Basic Repository. CrudRepository is like the most basic tool provided by Spring Data JPA for performing common database operations. It's an interface that gives you basic methods to Create, Read, Update, and Delete data in your database.

Jpa repository: Advanced Repository: JpaRepository is like an upgraded version of CrudRepository. It includes all the methods from CrudRepository, but also provides extra features, like pagination (breaking down results into pages) and sorting (ordering results).

7.) @Component 
      Annotating a class with @Component, you're telling the Spring Framework that an instance of this class should be kept in the ApplicationContext.
      The @Component annotation is a marker for any Java class that Spring manages and treats as a bean.
And the bean was managed by the IOC container. 
      ApplicationContext is special version of IOC container, which is handled by the appication context.
( Application start aanathum application context initialize aagi component class ku bean create pani soli ioc container kita solum.)
8.) @Configuration 
      Spring Configuration annotation indicates that the class has @Bean definition methods. So Spring container can process the class and generate Spring Beans to be used in the application.(same as the component scanning)

------------------------------------------------------------------------------------------------------------------------------------------
 9. SPRING MVC 
               => Spring MVC (Model-View-Controller) is a web framework that is part of the larger Spring Framework. It is designed to 
simplify the development of web applications by adhering to the MVC design pattern, which separates an application into three main components:
              1.MODEL: Represents the data or business logic of the application. It is responsible for handling data retrieval, storage, 
                       and any necessary business logic.
              2.VIEW:  Represents the presentation layer, or the user interface. It is responsible for displaying the data provided by 
                       the model to the user, typically using HTML, JSP, or other templating technologies.
              3.CONTROLLER: Acts as an intermediary between the Model and the View. It processes incoming requests, interacts with the 
                        model to retrieve or manipulate data, and returns the appropriate view to be rendered to the user.

------------------------------------------------------------------------------------------------------------------------------------------
10. What is Spring Boot, and what are its main features?
Answer:
Spring Boot is an extension of the Spring framework that simplifies the process of setting up and developing new Spring applications. Its main features include:
Auto-Configuration: Automatically configures Spring application based on the dependencies present on the classpath.
Standalone: Creates stand-alone Spring applications that can be run without requiring an external server.
Production-Ready: Provides features such as health checks and metrics to support production environments.
Embedded Servers: Supports embedded servers like Tomcat, Jetty, or Undertow, which means you don’t need to deploy WAR files separately.
Convention over Configuration: Reduces the need for configuration by following conventions and providing sensible defaults 

------------------------------------------------------------------------------------------------------------------------------------------

11.In your Spring Boot project, you have an Repository interface that extends JpaRepository, and JpaRepository is also an interface. Why does Repository use the extends keyword instead of implements to work with JpaRepository?

In Spring Boot, Repository uses the extends keyword instead of implements because both Repository and JpaRepository are interfaces. In Java, when one interface inherits from another, it uses extends. The implements keyword is used when a class implements an interface, but since Repository is an interface, it uses extends to inherit the methods provided by JpaRepository.
--------------------------------------------------------------------------------------------------------------------------------------------------
12. What is dependency Injection?
   => Dependency injection (DI) is a process whereby objects define their dependencies (that is, the other objects with which they work) only through constructor arguments, arguments to a factory method, or properties that are set on the object instance after it is constructed or returned from a factory method.
   => Setter Injection: The IOC container will inject the dependent bean object into the target bean object by calling the setter method.
   => Constructor Injection: The IOC container will inject the dependent bean object into the target bean object by calling the target bean constructor.
   => Field Injection: The IOC container will inject the dependent bean object into the target bean object by Reflection API

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
13.What is RequestParam ?

The @RequestParam annotation in Spring Boot is used to extract query parameters from the URL and pass them to a method.
Required or Optional: You can decide whether the parameter is mandatory or optional.
Default Value: If the parameter is not provided, you can set a default value.
Multiple Parameters: You can handle multiple query parameters at once.
In short, @RequestParam is used to get data from the URL and pass it to a method in your application.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
14.) What is Servlet?
A Servlet is a Java program that runs on a web server and handles requests from web clients, typically browsers. It’s a key component in web development using Java, allowing developers to create dynamic web content like web pages, forms, or responses to user actions.
How Servlets Work:
Client Request: A user interacts with a web page and sends a request (e.g., by clicking a button or submitting a form). This request is sent to the server where the servlet is hosted.
Servlet Receives the Request: The server forwards the request to the servlet, which is a Java class that extends HttpServlet.
Processing the Request: The servlet processes the request. It might involve reading form data, interacting with a database, or performing some business logic.
Generating a Response: After processing, the servlet generates a response. This response is usually in the form of an HTML page, but it can also be JSON, XML, or any other type of content.
Sending the Response Back to the Client: The server sends the generated response back to the client's browser, which then displays the content to the user.
Why Use Servlets?
Dynamic Content: Servlets allow you to generate dynamic web pages based on user inputs or other factors.
Integration with Java: Since servlets are Java-based, they easily integrate with other Java technologies and libraries.
Efficiency: Servlets are efficient and scalable, making them suitable for handling multiple user requests on a web server.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
15.) Controller vs RestController
      i. Controller - Used for defining a controller class that handles web requests and returns a view (like a JSP or Thymeleaf template). It's typically used in web applications that render views as HTML pages. Methods in a class annotated with @Controller return a View or ModelAndView object that corresponds to a web page.
      ii.RestController - A specialization of @Controller, this annotation is used to create RESTful web services. It automatically serializes the returned object to JSON (or XML) and writes it directly to the HTTP response body. It's commonly used in API development where the response is typically data, not a view.
      Methods in a class annotated with @RestController return the actual data (like a List, Map, or custom object) that will be serialized to JSON (or XML).

----------------------------------------------------------------------------------------------------------------------------------------------------------------

16.) What is the difference between @RequestMapping and @GetMapping in Spring Boot?

@RequestMapping:

Purpose: It is a general-purpose annotation used for handling HTTP requests.
Usage: It allows you to specify the HTTP method (GET, POST, PUT, DELETE, etc.) and the URL path.

@GetMapping:

Purpose: It is a shortcut for @RequestMapping, specifically for handling HTTP GET requests.
Usage: It is used to define controller methods that handle GET requests.

Difference:

@RequestMapping requires you to explicitly define the HTTP method (GET, POST, etc.), whereas @GetMapping is used specifically for handling GET requests.
@GetMapping and other similar annotations like @PostMapping, @PutMapping, and @DeleteMapping make your code more readable and concise by mapping methods to specific HTTP methods.
----------------------------------------------------------------------------------------------------------------------------------------------------------------
17.) What is Jsp?
JSP (JavaServer Pages) is a technology used to create dynamic web content in Java-based web applications. It allows developers to mix HTML, XML, or other types of data with Java code to create web pages that are generated on the server before being sent to the client's browser.
Lifecycle:
Translation: JSP pages are translated into servlets (Java classes) by the web container.
Compilation: The servlet is then compiled into bytecode that can be executed by the JVM.
Execution: When a client requests the JSP page, the corresponding servlet is executed to generate the dynamic content.
Cleanup: After execution, resources used by the JSP can be cleaned up.

Advantages of JSP:
Separation of Concerns: JSP allows a clear separation between the presentation layer (HTML) and the business logic (Java code).
Ease of Use: Embedding Java code directly into HTML makes it easy to create dynamic web content.
Reusability: You can use custom tags and libraries to create reusable components within JSP pages.
----------------------------------------------------------------------------------------------------------------------------------------------------------------
18.What are the Spring Boot key components?
*Spring Boot Auto-Configuration: This feature automatically configures your application based on the dependencies present in the classpath. It reduces the need for manual configuration.
*Spring Boot Application: The @SpringBootApplication annotation is a convenience annotation that combines @Configuration, @EnableAutoConfiguration, and @ComponentScan, which simplifies the setup of the Spring application context.
*Spring Boot Actuator: This component provides production-ready features such as monitoring and management over HTTP, JMX, or other protocols. It includes endpoints for health checks, metrics, and application information.
*Spring Boot CLI (Command Line Interface): Allows you to quickly prototype and test Spring Boot applications from the command line using Groovy scripts.

------------------------------------------------------------------------------------------------------------------------------------------------

19.What is Thymleaf?

Thymeleaf is a modern server-side Java template engine for web applications. It allows developers to create dynamic web pages using HTML, with embedded expressions to display data from the server. Thymeleaf integrates smoothly with Spring Boot, making it a popular choice for developing web applications.

20.What is the difference between @RestController and @Controller in Spring Boot?
Answer:

@RestController: A specialized version of @Controller used for creating RESTful web services. It combines @Controller and @ResponseBody, meaning that the return values of methods are directly written to the HTTP response body and are usually in JSON or XML format.

@Controller: Used for traditional web applications where views (e.g., JSP, Thymeleaf) are returned. Methods in a @Controller return the name of a view template rather than data directly.

-----------------------------------------------------------------------------------------------------------------------------------------
21.
i)What is Maven?
    =>Maven is a build automation and project management tool used primarily for Java projects.
    =>It helps manage project builds, dependencies, and documentation with a standardized approach. 
    =>Maven simplifies the build process by using a declarative configuration model.
ii)What is a Maven repository, and what types are there?
    => A Maven repository is a directory or server that stores artifacts (like JAR files and plugins). 
  There are three types of repositories:
      => Local Repository: Stored on the developer's machine.
      => Central Repository: The default global repository maintained by the Maven community.
      => Remote Repository: External repositories maintained by third parties or private organizations.

-----------------------------------------------------------------------------------------------------------------------------------------
22. SingleTon Class in Java 
      A Singleton class in Java is a design pattern that ensures a class has only one instance and provides a global point of access to that instance. This is useful when exactly one object is needed to coordinate actions across the system.     

Key Characteristics of a Singleton Class:

Private Constructor: The constructor is made private to prevent the instantiation of the class from outside the class.

Static Instance: A private static instance of the class is created inside the class itself. This is the single instance that will be returned whenever access to the class is required.

Public Static Method: A public static method (often called getInstance()) is provided to return the single instance of the class. This method ensures that only one instance of the class is created, even in a multi-threaded environment.
-----------------------------------------------------------------------------------------------------------
23.What is Inheritance in Java?
(Subclass and Superclass)

In Java, it is possible to inherit attributes and methods from one class to another. We group the "inheritance concept" into two categories:

subclass (child) - the class that inherits from another class
superclass (parent) - the class being inherited from
To inherit from a class, use the extends keyword.

the Car class (subclass) inherits the attributes and methods from the Vehicle class (superclass)

Why And When To Use "Inheritance"?
- It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class

Java Polymorphism
Polymorphism means "many forms", and it occurs when we have many classes that are related to each other by inheritance.

Like we specified in the previous chapter; Inheritance lets us inherit attributes and methods from another class. Polymorphism uses those methods to perform different tasks. This allows us to perform a single action in various ways.

For example, think of a superclass called Animal that has a method called animalSound(). Subclasses of Animals could be Pigs, Cats, Dogs, Birds - And they also have their own implementation of an animal sound (the pig oinks, and the cat meows, etc.)

24.What are Abstraction and Interface

Data abstraction hides certain details and shows only essential information to the user.

Abstraction can be achieved with either abstract classes or interfaces (which you will learn more about in the next chapter).
The abstract keyword is a non-access modifier, used for classes and methods:  
Abstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).
Abstract method: can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from).
Abstraction can also be achieved with Interfaces

Interfaces
Another way to achieve abstraction in Java is with interfaces.
An interface is a completely "abstract class" that is used to group related methods with empty bodies
To access the interface methods, the interface must be "implemented" (kind of like inherited) by another class with the implements keyword (instead of extends).

Interface methods do not have a body - the body is provided by the "implement" class
On implementation of an interface, you must override all of its methods
Interface methods are by default abstract and public
Interface attributes are by default public, static and final
An interface cannot contain a constructor (as it cannot be used to create objects)

Java does not support "multiple inheritance" (a class can only inherit from one superclass). However, it can be achieved with interfaces, because the class can implement multiple interfaces. Note: To implement multiple interfaces, separate them with a comma.

---------------------------------------------------------------------------------------------------------------------------------------------
25.What is JWT token and structure?

JWT stands for JSON Web Token. It’s a compact, URL-safe token format that is used to securely transmit information between parties. JWTs are commonly used for authentication and authorization purposes in web applications.
Structure of a JWT:
          =>A JWT consists of three parts, separated by dots (.):
          =>Header: Contains metadata about the token, such as the type of token (JWT) and the signing algorithm used (e.g., HMAC SHA256 or RSA).
           =>Payload: Contains the claims or the information you want to transmit. This can include user details, roles, or other data. Claims can be categorized into:
           =>Registered Claims: Predefined claims like iss (issuer), exp (expiration time), sub (subject), and aud (audience).
           =>Public Claims: Custom claims that you define for your specific use case.
           =>Private Claims: Custom claims agreed upon by both parties exchanging the token.
            =>Signature: To ensure the integrity and authenticity of the token, it is signed with a secret key (for HMAC algorithms) or a private key (for RSA algorithms). The signature is created by encoding the header and payload and then applying the signing algorithm.
-----------------------------------------------------------------------------------------------------------------------------------------
26.) What is JSON?
      JSON, or JavaScript Object Notation, is a lightweight data interchange format that's easy for humans to read and write, and easy for machines to parse and generate. It’s commonly used for transmitting data in web applications between a server and a client, or between different parts of a system.
Key Characteristics of JSON:
Human-Readable: JSON is written in a plain text format, making it easy to read and understand.
Language-Independent: Although JSON is derived from JavaScript, it is language-independent and can be used with most modern programming languages (e.g., Python, Java, C#, etc.).
Structured Data: JSON is a way to represent structured data in the form of key-value pairs and arrays.
Common Uses of JSON:
APIs: JSON is widely used as the format for data exchange in RESTful APIs.
Configuration Files: JSON is often used to configure settings for applications and tools.
Data Storage: It’s sometimes used for storing lightweight data or configuration data in files.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
27.) What is Hibernate ? and hibernate using benefits?

Hibernate oru Java library, which helps in managing database operations and interactions in an object-oriented way. It's an Object-Relational Mapping (ORM) tool, and it simplifies database operations by mapping Java objects to database tables.

Benefits of Using Hibernate:

Simplified Data Access: Reduces boilerplate code for data access.
Automatic Mapping: Maps Java objects to database tables automatically.
Query Flexibility: Supports HQL and Criteria API for complex queries.
Caching: Reduces database load with efficient caching strategies.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
28. What is Spring Boot DevTools and how does it help in development?
Answer:
Spring Boot DevTools is a development tool that provides features to improve the development experience. Key features include:

Automatic Restart: Automatically restarts the application when changes are made to classpath resources.
LiveReload: Automatically refreshes the browser when static resources change.
Configuration Properties: Allows for specific configurations that only apply during development.
Adding the spring-boot-devtools dependency to your project enables these features and improves productivity during development.  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
29.) Tomcat Server
      Tomcat is an essential part of Spring Boot as it serves as the default embedded web server. When you run a Spring Boot application, it comes with its own internal Tomcat server, which means you don’t need to install or configure a separate web server.       
      Tomcat handles incoming HTTP requests, manages sessions, and delivers responses, making it easy to develop and run web applications locally.
      It binds to your local machine, typically on port 8080, and allows your application to run as a standalone executable, making development, testing, and deployment much simpler. 
      Since Tomcat is embedded, you don't need a network connection to run your application, everything is self-contained within your system. This setup is great for both developers and production environments because it reduces the complexity of managing external servers.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
30.What is ArrayList and LinkedList
The LinkedList class is a collection which can contain many objects of the same type, just like the ArrayList.
The LinkedList class has all of the same methods as the ArrayList class because they both implement the List interface. This means that you can add items, change items, remove items and clear the list in the same way.

However, while the ArrayList class and the LinkedList class can be used in the same way, they are built very differently.
The ArrayList class has a regular array inside it. When an element is added, it is placed into the array. If the array is not big enough, a new, larger array is created to replace the old one and the old one is removed.
The LinkedList stores its items in "containers." The list has a link to the first container and each container has a link to the next container in the list. To add an element to the list, the element is placed into a new container and that container is linked to one of the other containers in the list.

When To Use
Use ofan ArrayList is to store and access data and LinkedList to manipulate data.
For many cases, the ArrayList is more efficient as it is common to need access to random items in the list
-----------------------------------------------------------------------------------------------------------------------------------------
31.What is the use of @EnableScheduling in Spring Boot?

The @EnableScheduling annotation is used to enable scheduling of tasks in Spring Boot. You can schedule tasks using @Scheduled annotation to run methods at fixed intervals or cron expressions.
-----------------------------------------------------------------------------------------------------------------------------------------

32.What is Docker and how does it work?

Docker is a platform that allows developers to package applications and their dependencies into lightweight, portable containers. These containers ensure that the application runs consistently across different environments, such as development, testing, and production.
How it works:
      => Containerization: Docker containers bundle the application code, runtime, libraries, and settings into a single package. This ensures that the application behaves the same way regardless of where it is deployed.
      =>Images and Containers: Docker uses images as blueprints to create containers. An image is a read-only template that contains everything needed to run an application. When you run an image, Docker creates a container, which is a running instance of that image.
      =>Docker Engine: This is the runtime that manages and runs containers. It provides the necessary environment for containers to execute.
      =>Docker Hub: A cloud-based registry where Docker images can be stored and shared. Developers can pull images from Docker Hub to run containers on their local machines or servers.
---------------------------------------------------------------------------------------------------------------------------------------------------------------
33.What is @id?
  =>@Id annotation is used within the Java Persistence API (JPA) to specify the primary key of an entity in a database.
  =>Importance of @Id:
Uniqueness: Ensures that each record in the table is unique and can be identified by this primary key.
Relationships: Helps in establishing relationships between entities, such as One-to-One, One-to-Many, or Many-to-Many.
Querying: Enables efficient querying and indexing by the database since the primary key is typically indexed.
---------------------------------------------------------------------------------------------------------------------------------------------------------------
34.) What is Actuator in Spring Boot?
      In Spring Boot, Actuator is a powerful feature that provides production-ready tools for monitoring and managing applications. It exposes various endpoints that give insights into the application's internals, such as health, metrics, environment properties, and more.
Key Features of Spring Boot Actuator:
1.Health Checks (/actuator/health)
2.Metrics (/actuator/metrics)
3.Environment Info (/actuator/env)
4.Application Info (/actuator/info)
5.Thread Dump (/actuator/threaddump)
6.HTTP Traces (/actuator/httptrace)
7.Mappings (/actuator/mappings)
---------------------------------------------------------------------------------------------------------------------------------------------------------------
35.) What is the purpose of using @ComponentScan in the class files? 

Purpose of @ComponentScan in Spring:
@ComponentScan is an annotation used in Spring Framework that tells the Spring container to scan specific packages to find components, beans, controllers, and other Spring-managed classes automatically.

Why Use @ComponentScan?
Discover Beans Automatically: The main purpose of @ComponentScan is to automatically discover beans in your application. It scans for classes annotated with @Component, @Service, @Repository, @Controller, etc., and registers them as beans in the Spring context.
Scan Multiple Packages: By default, Spring Boot scans the package where the main application class with @SpringBootApplication is located. If you need to include components from other packages, you can use @ComponentScan.
Customization: You can customize the scanning process by specifying which packages to include, ensuring that only the required beans are loaded, and avoiding unnecessary processing.

-----------------------------------------------------------------------------------------------------------------------------------------
36.What is a POM file in Maven?
                 => POM stands for Project Object Model. The POM file (pom.xml) is the core of a Maven project and contains 
               configuration information such as project dependencies, build settings, and plugins.
        Key Elements:
                   <dependencies>: Lists project dependencies.
                   <build>: Configures the build process, including plugins and goals.
                  <properties>: Defines project properties that can be used elsewhere in the POM.

-----------------------------------------------------------------------------------------------------------------------------------------
37. Application Properties , why we use it ?
      In Spring Boot, the application.properties (or application.yml) file is a configuration file used to set up various settings and properties for your Spring Boot application. This file allows you to externalize configuration so that you can easily change the behavior of your application without modifying the source code.
       It centralizes all the configuration settings in one place, making it easier to manage and maintain.
       Spring Boot can automatically pick the correct file based on the active profile, allowing you to tailor your application’s configuration for development, testing, and production.
       Spring Boot makes it simple to access properties defined in the application.properties file through the @Value annotation or by binding them to a configuration class using the @ConfigurationProperties annotation.
      The application.properties file is a powerful feature in Spring Boot that simplifies configuration management, making it easier to adapt the application to different environments and requirements.

-----------------------------------------------------------------------------------------------------------------------------------------
38.) Describe the flow of HTTPS requests through the Spring Boot application.
HTTP Request: The client sends an HTTP request to the server.
DispatcherServlet: Routes the request to the appropriate controller.
Controller: Maps and handles the request, delegates business logic to the service layer.
Service Layer: Executes the business logic and interacts with the repository layer.
Repository Layer: Performs CRUD operations using JPA.
Response:
For REST APIs: Sends a JSON/XML response back to the client.
For MVC applications: Renders a JSP page with model data and sends it back to the client.
Error Handling: Manages errors and returns appropriate responses or error pages.
----------------------------------------------------------------------------------------------------------------------------------------------
39.What is @Bean?
   => @Bean is an annotation used in the Spring Framework and managed by the Spring Container.
   => @Bean is specified to create a bean using a method in the Spring IoC container.
   => Spring Container registers the return value of method with Bean annotation as a bean.
   => Same Bean method call seidhalum multiple times, returning the same bean each time
   => You can use this annotation while doing bean customization or as a third-party library.

-----------------------------------------------------------------------------------------------------------------------------------------
40.What is Swagger, and why is it used in Spring Boot?
      => Swagger is a tool that helps document REST APIs. 
      =>It automatically generates interactive API documentation, making it easy to test and understand the API endpoints.
      =>In Spring Boot, Swagger is often used to provide a user interface where developers can see all available endpoints, their 
         parameters, request/response types, and test them directly from the browser.
      =>Swagger also generates JSON or YAML-based documentation of the APIs, which is useful for frontend and backend developers to 
         communicate efficiently.
-----------------------------------------------------------------------------------------------------------------------------------------
41.why do we spring boot over spring?

1. Simplified Configuration
Spring Boot: Provides auto-configuration which automatically configures your application based on the dependencies you have added. This reduces the need for boilerplate configuration code.
Spring: Requires manual configuration of application components, often involving XML or Java-based configuration classes, which can be more verbose and complex.

2. Standalone Applications
Spring Boot: Enables creating standalone applications with embedded servers (like Tomcat, Jetty, or Undertow), so you don't need to deploy your application on a separate server.
Spring: Typically requires a separate application server or servlet container for deployment.

3. Production-Ready Features
Spring Boot: Includes built-in production-ready features such as metrics, health checks, and externalized configuration. These are accessible via Actuator endpoints and make it easier to monitor and manage applications.
Spring: Requires additional setup and third-party libraries to achieve similar functionality.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
42.Thread vs Runnable Classes Comparison ?
Thread:
   => Thread extends the class so inheritance can be done only once in the class (no multiple inheritance).
   => You can directly extend the Thread class and create a thread.
   => Create Thread and call start() method directly.
Runnable:
   => By implementing the Runnable interface, other classes can be extended.
   => Implement Runnable interface and wrap it in Thread class.
   => Pass the Thread class as a Runnable object and call the start() method.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
43.) What is Session?
      A session is a way to store information about a user's interaction with a website or application over a period of time. When you visit a website, the server creates a session to keep track of who you are and what you're doing while you're there. This is important because HTTP (the protocol websites use) is stateless, meaning it doesn't remember users between requests.

Here's how a session works in simple terms:

Session Creation: When you visit a website, the server starts a session for you and gives you a unique ID (called a session ID).
Storing Data: The server can store data related to your activities (like login status, items in a shopping cart, etc.) in this session.
Session ID: The server sends the session ID back to your browser, usually in the form of a cookie.
Using the Session: Every time you interact with the website, your browser sends this session ID back to the server, so the server knows it's you and can retrieve your session data.
Session Expiry: Sessions usually expire after a certain amount of inactivity or when you log out.      
 --------------------------------------------------------------------------------------------------------------------------------------------------

45.What is Swagger and it Annotation?
Swagger is an open-source framework for designing, building, documenting, and consuming RESTful APIs. It helps developers describe the structure of APIs in a standard format, which can be understood by both humans and machines. Swagger automatically generates interactive API documentation, which developers and stakeholders can use to interact with the API, understand its features, and even test it.
Swagger works with the OpenAPI Specification (OAS), which defines a standard way to describe REST APIs, including endpoints, request parameters, response structures, authentication methods, and more.
Swagger Annotations:
@Api:
Declares a class as a Swagger resource. It is used at the controller level to describe the API as a whole.
@ApiOperation:
Describes a specific operation in an API endpoint. It's used to provide additional information about what an API method does.
@ApiParam:
Describes a single parameter of an API method. It can be used to define path parameters, query parameters, headers, or body parameters.
@ApiResponse:
Describes a possible response for an API operation, including the HTTP status code and any messages or models associated with it.
@ApiResponses:
This annotation is used in combination with @ApiResponse to define multiple response types for a method.
@ApiIgnore:
This annotation is used to hide specific endpoints or parameters from Swagger documentation.
-----------------------------------------------------------------------------------------------------------------------------------------
46.What is OpenAPI Specification?
           => OpenAPI Specification (OAS) oru standard format for REST APIs describe panna use pannuvaanga. Swagger 2.0 OpenAPI oda base-a irundhadhu. Idhula API endpoints, operations (GET, POST, etc.), parameters, request/response formats, authentication methods ellam define pannidum.
OpenAPI main uses:
           1=>API Documentation: Automatically create panna mudiyum, easy-a users API use panna help pannidum.
           2=>API Testing: Swagger UI madri tools use panni APIs test pannalam without writing separate client code.
           3=>API Contract: API consumer and provider madri two teams irundha, OpenAPI oru clear contract madhiri irukkum. API structure pathi ellam clear-a solirukkum
-----------------------------------------------------------------------------------------------------------------------------------------
47.) Difference between Native query & Hibernate query.
Native Query:
SQL-based: Native queries are written using plain SQL. You can use database-specific SQL syntax.
Direct Database Interaction: Native queries bypass the Hibernate layer and directly interact with the underlying database.
Less Portable: Since native queries are database-specific, they may not be portable across different database systems.
Complex Queries: Native queries are useful when you need to execute complex SQL operations that are not easily achievable with Hibernate.
Performance: Native queries can be faster for specific operations because they interact directly with the database without the Hibernate translation layer.
Example:
String sql = "SELECT * FROM employees WHERE status = 'ACTIVE'";

Hibernate Query (HQL):
Object-oriented: Hibernate Query Language (HQL) is object-oriented and works with entity objects rather than directly with database tables.
Database Agnostic: HQL is independent of the database, which makes the queries more portable across different databases.
Translation Layer: Hibernate translates HQL queries into native SQL for execution, providing an abstraction over SQL.
Ease of Use: HQL allows querying based on entity classes and their fields, which can simplify the query structure.
Limitations: HQL might not be suitable for very complex database-specific queries.
Example:
String hql = "FROM Employee e WHERE e.status = 'ACTIVE'";
----------------------------------------------------------------------------------------------------------------------------------------------
48.Java Advanced Sorting (Comparator and Comparable)
   Comparable and Comparator are used to compare objects for ordering and sorting.
Comparable Interface:
The Comparable interface is used when you want to define the default natural ordering for objects of a class. It requires implementing the compareTo() method.
Comparator Interface:
The Comparator interface is more flexible because it allows you to define multiple sorting sequences. You don’t need to modify the class itself, and you can define custom sorting logic externally.

------------------------------------------------------------------------------------------------------------------------------------------
48.what is Jasper Report and How is it Work?
Jasper Reports is an open-source reporting tool used to generate reports from a wide range of data sources (like databases, XML, and JavaBeans) and export them to various formats (PDF, HTML, Excel, etc.). It is commonly used in Java applications to create dynamic content in reports. Let me explain how Jasper Reports works:
1.Report Template (JRXML file):
The first step in Jasper Reports is to create a report template. This is typically an XML file with the extension .jrxml. The template defines the layout, structure, and format of the report. 
2.Compiling the Template:
The .jrxml file is not directly used by the Java application. It needs to be compiled into a .jasper file, which is the binary version of the report. The Jasper engine compiles the .jrxml template into the .jasper file, which can then be used by the Java application to generate reports.
3.Providing Data to the Report:
The compiled report template is filled with data. Jasper Reports can pull data from multiple sources such as:
A database (e.g., using SQL queries)
JavaBeans or Collections
XML files, CSV files, etc.
4.Generating the Report:
Once the report is filled with data, it can be generated in different formats like PDF, HTML, Excel, etc.
Integration with Java Applications:
Jasper Reports can be easily integrated into Java or Spring Boot applications. In a Spring Boot app, you can write a service class to compile, fill, and export reports. You can also return the report as a response (e.g., PDF report) in REST APIs.
---------------------------------------------------------------------------------------------------------------------------------------------------------
49.XML vs pom.xml difference 
XML :
  Extensible Markup Language. 
  XML is a markup language used to define rules for encoding documents in a format that is both human-readable and machine-readable.XML is a general information storage and exchange language.
pom.xml :
  Project Object Model XML
  pom.xml is a Maven-specific XML file that specifically manages dependency and build information for Java projects.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
50.)Explain Microservices.
      A microservice is an architectural style where an application is broken down into small, independent services. Each service focuses on a specific business function and can be developed, deployed, and scaled independently. Microservices communicate with each other through lightweight protocols like HTTP or messaging queues.


