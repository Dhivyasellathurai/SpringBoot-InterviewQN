1. Spring IOC Container 
      The IOC (Inversion of Control) container in Spring is a core concept responsible 
for managing the lifecycle and dependencies of objects, known as beans.
It helps implement Dependency Injection (DI), which means that the control of creating 
and managing objects is transferred from the application code to the Spring framework.

   the IOC container helps achieve loose coupling between objects by handling their creation, 
lifecycle, and dependencies, making the code cleaner and easier to test.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

2.  What is Spring Boot Auto-Configuration, and how does it work?

Explanation:

In Spring Boot, auto-configuration is one of its powerful features. When you add a specific dependency in Spring Boot, it automatically configures the components required for that dependency. For example, if you add the spring-boot-starter-web dependency, Spring Boot will automatically configure everything needed for a web application (like DispatcherServlet, ViewResolver, etc.).

How does it work?

@EnableAutoConfiguration Annotation: In Spring Boot applications, we use the @SpringBootApplication annotation. This annotation includes @EnableAutoConfiguration, which triggers the auto-configuration process.

Auto-Configuration Classes: There are specific classes in Spring Boot dedicated to auto-configuration (like WebMvcAutoConfiguration, JpaAutoConfiguration). These are listed in the spring.factories file in Spring Boot.

Conditionally Load: The auto-configuration classes are conditionally loaded based on the dependencies you’ve added. For instance, if you add the spring-boot-starter-data-jpa dependency, the JpaAutoConfiguration class will be loaded, but only if the required dependencies for Spring Data JPA are present.

Custom Configuration: You can also customize the configuration. If you don’t want to use a specific auto-configuration, you can exclude it using @EnableAutoConfiguration(exclude = ClassName.class).

Spring Boot’s auto-configuration simplifies the setup process, allowing you to focus on essential configuration by writing minimal code, while Spring Boot handles the rest.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

3. What is Break and Continue?

break and continue statements are used to skip some statements inside the loop or terminate the loop immediately without checking the test expression.

These statements can be used inside any loops such as for, while, do-while loop.
The break statement is used to terminate the loop immediately. 

The continue statement is used to skip the current iteration of the loop.
Break keyword with a semicolon is used to indicate break statements in java programming. continue keyword is used to indicate continue statement in java programming.it was also called loop control jump control statement 

------------------------------------------------------------------------------------------------------------------------------------------------

4.What is Spring Boot, and how is it different from Spring Framework?

Spring Boot is an extension of the Spring Framework designed to simplify and accelerate the development of Spring applications. It provides auto-configuration, a set of pre-defined starter dependencies, and an embedded server, which streamline the setup and deployment process. Unlike the traditional Spring Framework, which requires extensive manual configuration and external server deployment, Spring Boot allows for rapid application development with minimal configuration and built-in features like monitoring and management endpoints. This makes Spring Boot particularly advantageous for quickly creating production-ready applications.

-------------------------------------------------------------------------------------------------------------------------------------------------

5.What is @Autowierd Annotations?


The @Autowired annotation is used in the Spring Framework to automatically inject dependencies into Spring-managed beans. It simplifies dependency injection by allowing Spring to resolve and inject collaborating beans into your bean.

Key Points:

Automatic Dependency Injection:
@Autowired is used to inject dependencies automatically without the need for explicit configuration. Spring will automatically find and inject the required bean.

Optional Dependencies:
If a dependency is not mandatory, you can use @Autowired(required = false), and Spring will not throw an exception if the bean is not found.

Qualifier:
If there are multiple beans of the same type, you can use @Qualifier to specify which bean to inject.

Spring Boot:
In a Spring Boot application, @Autowired is commonly used to inject services, repositories, or other components into your classes, promoting loose coupling and easier management of dependencies.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
6.) What is the difference between CrudRepo and JpaRepo?
Crud repository: It is a Basic Repository. CrudRepository is like the most basic tool provided by Spring Data JPA for performing common database operations. It's an interface that gives you basic methods to Create, Read, Update, and Delete data in your database.

Jpa repository: Advanced Repository: JpaRepository is like an upgraded version of CrudRepository. It includes all the methods from CrudRepository, but also provides extra features, like pagination (breaking down results into pages) and sorting (ordering results).

7.) @Component 
      Annotating a class with @Component, you're telling the Spring Framework that an instance of this class should be kept in the ApplicationContext.
      The @Component annotation is a marker for any Java class that Spring manages and treats as a bean.
And the bean was managed by the IOC container. 
      ApplicationContext is special version of IOC container, which is handled by the appication context.
( Application start aanathum application context initialize aagi component class ku bean create pani soli ioc container kita solum.)
8.) @Configuration 
      Spring Configuration annotation indicates that the class has @Bean definition methods. So Spring container can process the class and generate Spring Beans to be used in the application.(same as the component scanning)


       

